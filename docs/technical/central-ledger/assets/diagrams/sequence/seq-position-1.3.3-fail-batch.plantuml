/'*****
 License
 --------------
 Copyright Â© 2017 Bill & Melinda Gates Foundation
 The Mojaloop files are made available by the Bill & Melinda Gates Foundation under the Apache License, Version 2.0 (the "License") and you may not use these files except in compliance with the License. You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, the Mojaloop files are distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
 Contributors
 --------------
 This is the official list of the Mojaloop project contributors for this file.
 Names of the original copyright holders (individuals or organizations)
 should be listed with a '*' in the first column. People who have
 contributed from an organization can be listed under the organization
 that actually holds the copyright for their contributions (see the
 Gates Foundation organization for an example). Those individuals should have
 their names indented and be marked with a '-'. Email address can be added
 optionally within square brackets <email>.
 * Gates Foundation
 - Name Surname <name.surname@gatesfoundation.com>

 * Rajiv Mothilal <rajiv.mothilal@modusbox.com>
 * Georgi Georgiev <georgi.georgiev@modusbox.com>
 * Sam Kummary <sam@modusbox.com>
 * Vijay Kumar <vijaya.guthi@infitx.com>
 -------------
 ******'/

@startuml
' declate title
title 1.3.3. Position Fail Facade

autonumber

' Actor Keys:
'   boundary - APIs/Interfaces, etc
'   collections - Kafka Topics
'   control - Kafka Consumers
'   entity - Database Access Objects
'   database - Database Persistence Store

' declare actors
control "Position Fail Facade" as FACADE_POSITION_FAIL
collections "Notification-Topic" as TOPIC_NOTIFICATIONS
database "Central Store" as DB

box "Central Service" #LightYellow
    participant FACADE_POSITION_FAIL
    participant DB
    participant TOPIC_NOTIFICATIONS
end box

' start flow
activate FACADE_POSITION_FAIL
group Fail Position Batch Processing
    FACADE_POSITION_FAIL -> FACADE_POSITION_FAIL: Loop through batch and build list of transferIds \n and calculate sumTransfersInBatch (from payload.amount.amount)

    ' TODO: We do not see how this scenario will be triggered
    opt type == 'position' && action == 'fail' (Unable to currently trigger this scenario)
        FACADE_POSITION_FAIL -> DB: Retrieve current state of all transfers in array from DB with select whereIn\n<color #FF0000><b>Error code:</b> 2003</color>
        activate DB
        hnote over DB #lightyellow
            transferStateChange
        end note
        DB --> FACADE_POSITION_FAIL: Return current state of transfers from DB
        deactivate DB
        FACADE_POSITION_FAIL <-> FACADE_POSITION_FAIL: Validate current state (transferStateChange.transferStateId == 'FAILED')

        group Persist Position change and Transfer state
            FACADE_POSITION_FAIL -> FACADE_POSITION_FAIL: **transferStateId** = 'FAILED'
            FACADE_POSITION_FAIL -> DB: Select participantPosition.value FOR UPDATE for payerCurrencyId
            activate DB
            hnote over DB #lightyellow
                participantPosition
            end note
            DB --> FACADE_POSITION_FAIL: Return participantPosition
            deactivate DB
            FACADE_POSITION_FAIL <-> FACADE_POSITION_FAIL: **latestPosition** = participantPosition - sumTransfersInBatch
            FACADE_POSITION_FAIL->DB: Persist latestPosition to DB for Payer
            hnote over DB #lightyellow
                UPDATE **participantPosition**
                SET value = latestPosition
            end note
            activate DB
            deactivate DB
            FACADE_POSITION_FAIL -> DB: Persist participant position change and state change
            hnote over DB #lightyellow
                    Bulk INSERT **transferStateChange** 
                    VALUES (transferStateId)

                    Bulk INSERT **participantPositionChange**
                    SET participantPositionId = participantPosition.participantPositionId,
                    transferStateChangeId = transferStateChange.transferStateChangeId,
                    value = latestPosition,
                    reservedValue = participantPosition.reservedValue
                    createdDate = new Date()
            end note
            activate DB
            deactivate DB
        end
        note right of FACADE_POSITION_FAIL #yellow
            Message: {
                id: <transferMessage.transferId>
                from: <transferMessage.payerFsp>,
                to: <transferMessage.payeeFsp>,
                type: application/json
                content: {
                    headers: <transferHeaders>,
                    payload: {
                         "errorInformation": {
                             "errorCode": 3100,
                             "errorDescription": "Transfer failed",
                             "extensionList": <transferMessage.extensionList>
                         }
                     }
                },
                metadata: {
                    event: {
                        id: <uuid>,
                        responseTo: <previous.uuid>,
                        type: notification,
                        action: abort,
                        createdAt: <timestamp>,
                        state: {
                            status: 'error',
                            code: <errorInformation.errorCode>
                            description: <errorInformation.errorDescription>
                        }
                    }
                }
            }
        end note
        FACADE_POSITION_FAIL -> TOPIC_NOTIFICATIONS: Publish Notification event\n<color #FF0000><b>Error code:</b> 2003</color>
        activate TOPIC_NOTIFICATIONS
        deactivate TOPIC_NOTIFICATIONS
    end
end
deactivate FACADE_POSITION_FAIL
@enduml

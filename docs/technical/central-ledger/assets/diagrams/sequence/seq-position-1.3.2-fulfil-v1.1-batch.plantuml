/'*****
 License
 --------------
 Copyright Â© 2017 Bill & Melinda Gates Foundation
 The Mojaloop files are made available by the Bill & Melinda Gates Foundation under the Apache License, Version 2.0 (the "License") and you may not use these files except in compliance with the License. You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, the Mojaloop files are distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
 Contributors
 --------------
 This is the official list of the Mojaloop project contributors for this file.
 Names of the original copyright holders (individuals or organizations)
 should be listed with a '*' in the first column. People who have
 contributed from an organization can be listed under the organization
 that actually holds the copyright for their contributions (see the
 Gates Foundation organization for an example). Those individuals should have
 their names indented and be marked with a '-'. Email address can be added
 optionally within square brackets <email>.
 * Gates Foundation
 - Name Surname <name.surname@gatesfoundation.com>

 * Georgi Georgiev <georgi.georgiev@modusbox.com>
 * Rajiv Mothilal <rajiv.mothilal@modusbox.com>
 * Miguel de Barros <miguel.debarros@modusbox.com>
 * Valentin Genev <valentin.genev@modusbox.com>
 --------------
 ******'/

@startuml
' declate title
title 1.3.2. Position Fulfil Facade v1.1

autonumber

' Actor Keys:
'   boundary - APIs/Interfaces, etc
'   collections - Kafka Topics
'   control - Kafka Consumers
'   entity - Database Access Objects
'   database - Database Persistence Store

' declare actors
control "Position Fulfil Facade" as FACADE_POSITION_FULFIL
database "Central Store" as DB
collections "Notifications-Topic" as TOPIC_NOTIFICATIONS

box "Central Service" #LightYellow
    participant FACADE_POSITION_FULFIL
    participant DB
    participant TOPIC_NOTIFICATIONS
end box

' start flow
activate FACADE_POSITION_FULFIL
group Fulfil Position Batch Processing
    FACADE_POSITION_FULFIL -> FACADE_POSITION_FULFIL: Loop through batch and build list of transferIds \n and calculate sumTransfersInBatch (from payload.amount.amount)
    FACADE_POSITION_FULFIL -> DB: Retrieve current state of all transfers in array from DB with select whereIn\n<color #FF0000><b>Error code:</b> 2003</color>
    activate DB
    hnote over DB #lightyellow
        transferStateChange
        transferParticipant
    end note
    DB --> FACADE_POSITION_FULFIL: Return current state of transfer from DB
    deactivate DB
    FACADE_POSITION_FULFIL <-> FACADE_POSITION_FULFIL: Validate current state (transferState is 'RECEIVED-FULFIL')\n<color #FF0000><b>Error code:</b> 2001</color> against failing transfers\nBatch is not rejected as a whole
    group Persist Position change and Transfer State (with transferState='COMMITTED' on position check pass)
        FACADE_POSITION_FULFIL -> DB: Select participantPosition.value FOR UPDATE from DB for Payee
        activate DB
        hnote over DB #lightyellow
            participantPosition
        end note
        DB --> FACADE_POSITION_FULFIL: Return participantPosition.value from DB for Payee
        deactivate DB
        FACADE_POSITION_FULFIL <-> FACADE_POSITION_FULFIL: **latestPosition** = participantPosition.value - sumTransfersInBatch
        FACADE_POSITION_FULFIL->DB: Persist latestPosition to DB for Payee
        hnote over DB #lightyellow
            UPDATE **participantPosition**
            SET value = latestPosition
        end note
        activate DB
        deactivate DB
        FACADE_POSITION_FULFIL -> FACADE_POSITION_FULFIL: Add transfer to the processedTransfer list recording \n the transfer state values
        FACADE_POSITION_FULFIL -> DB: Bulk Persist transfer state for all transfers in batch
        hnote over DB #lightyellow
                batch INSERT **transferStateChange** transferStateId = 'COMMITTED'

                select from transferStateChange table where transferId in ([transferBatch.transferId,...])
                build list of transferStateChanges from transferBatch
        end note
        FACADE_POSITION_FULFIL -> DB: Bulk Persist participant position change for all transfers in batch
        hnote over DB #lightyellow
                INSERT **participantPositionChange**
                SET participantPositionId = participantPosition.participantPositionId,
                transferStateChangeId = transferStateChange.transferStateChangeId,
                value = latestPosition (???),
                reservedValue = participantPosition.reservedValue
                createdDate = new Date()
        end note
        activate DB
        deactivate DB
    end

    note right of FACADE_POSITION_FULFIL #yellow
        Message:
        {
            id: <transferMessage.transferId>
            from: <transferMessage.payerFsp>,
            to: <transferMessage.payeeFsp>,
            type: application/json
            content: {
                headers: <transferHeaders>,
                payload: <transferMessage>
            },
            metadata: {
                event: {
                    id: <uuid>,
                    responseTo: <previous.uuid>,
                    type: transfer,
                    action: commit || reserve,
                    createdAt: <timestamp>,
                    state: {
                        status: "success",
                        code: 0
                    }
                }
            }
        }
    end note
    FACADE_POSITION_FULFIL -> TOPIC_NOTIFICATIONS: Publish Transfer event\n<color #FF0000><b>Error code:</b> 2003</color>
    activate TOPIC_NOTIFICATIONS
    deactivate TOPIC_NOTIFICATIONS
end
deactivate FACADE_POSITION_FULFIL
@enduml

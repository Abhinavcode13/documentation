# CircleCI v2 Config
version: 2

defaults_working_directory: &defaults_working_directory
  working_directory: /home/circleci/project

defaults_docker_node: &defaults_docker_node
  docker:
    - image: node:10.15-alpine

defaults_Dependencies: &defaults_Dependencies
  name: Set default environment
  command: |
    apk --no-cache add git
    apk --no-cache add ca-certificates
    apk --no-cache add curl
    apk --no-cache add openssh-client
    apk add --no-cache -t build-dependencies make gcc g++ python libtool autoconf automake
    npm config set unsafe-perm true

defaults_Environment: &defaults_environment
  name: Set default environment
  command: |
    echo "Nothing to do here right now...move along!"

defaults_deploy_configure_helm: &defaults_deploy_configure_helm
  name: Configure Helm
  command: |
    helm init --client-only

defaults_deploy_install_or_upgrade_helm_chart: &defaults_deploy_install_or_upgrade_helm_chart
  name: Install or Upgrade Helm Chart
  command: |
    echo "Install or Upgrade Chart ${K8_RELEASE_NAME} for Docker Image ${DOCKER_ORG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_TAG}"
    if [ -z "$(helm list -q | grep -E "^${K8_RELEASE_NAME}$")"  ] && [ "$(helm list -q | grep -E "^${K8_RELEASE_NAME}$")" != "Error: Unauthorized" ];
    then
        echo "Installing ${K8_RELEASE_NAME} new release"
        helm install --namespace=$K8_NAMESPACE --name=$K8_RELEASE_NAME --repo=$K8_HELM_REPO --version $K8_HELM_CHART_VERSION $HELM_VALUE_SET_VALUES -f $CIRCLE_WORKING_DIRECTORY/$AWS_S3_DIR_DEVOPS_DEPLOYMENT_CONFIG_HELM/$HELM_VALUE_FILENAME $K8_HELM_CHART_NAME
    else
        echo "Upgrading ${K8_RELEASE_NAME} release"
        helm upgrade $K8_RELEASE_NAME --repo=$K8_HELM_REPO --version $K8_HELM_CHART_VERSION --reuse-values $HELM_VALUE_SET_VALUES -f $CIRCLE_WORKING_DIRECTORY/$AWS_S3_DIR_DEVOPS_DEPLOYMENT_CONFIG_HELM/$HELM_VALUE_FILENAME $K8_HELM_CHART_NAME
    fi

defaults_slack_announcement: &defaults_slack_announcement
  name: Slack announcement for tag releases
  command: |
    curl -X POST \
      $SLACK_WEBHOOK_ANNOUNCEMENT \
      -H 'Content-type: application/json' \
      -H 'cache-control: no-cache' \
      -d "{
      \"text\": \"*${CIRCLE_PROJECT_REPONAME}* - Release \`${CIRCLE_TAG}\`: https://github.com/mojaloop/${CIRCLE_PROJECT_REPONAME}/releases/tag/${CIRCLE_TAG}\"
    }"

defaults_publish_to_gh_pages: &defaults_publish_to_gh_pages
  name: Publish documentation
  command: |
    echo "Checking out $GITBOOK_TARGET_BRANCH"
    git checkout $GITBOOK_TARGET_BRANCH

    echo "Pulling latest code from $GITBOOK_TARGET_BRANCH branch..."
    git pull https://${GITHUB_TOKEN}@github.com/${GITHUB_PROJECT_USERNAME}/${GITHUB_PROJECT_REPONAME}.git $GITBOOK_TARGET_BRANCH --rebase

    echo "Copying contents of _book to root..."
    cp -R _book/* .

    echo "Staging general changes..."
    git add .

    echo "Staging generated UML..."
    git add -f assets/images/uml/*.*

    echo "Commiting changes..."
    git commit -a -m "Updating release to $GITHUB_TAG"

    echo "Publishing $GITHUB_TAG release to $GITBOOK_TARGET_BRANCH on github..."
    echo "git push https://${GITHUB_TOKEN}@github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}.git $GITBOOK_TARGET_BRANCH"
#    git push https://${GITHUB_TOKEN}@github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}.git $GITBOOK_TARGET_BRANCH

jobs:
  setup:
    <<: *defaults_working_directory
    <<: *defaults_docker_node
    steps:
      - checkout
      - run:
          <<: *defaults_Dependencies
      - run:
          <<: *defaults_environment
      - run:
          name: Access npm folder as root
          command: cd $(npm root -g)/npm
      - run:
          name: Update NPM install
          command: npm install
      - run:
          name: Delete build dependencies
          command: apk del build-dependencies
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - _book

  build:
    <<: *defaults_working_directory
    <<: *defaults_docker_node
    steps:
      - checkout
      - run:
          <<: *defaults_Dependencies
      - run:
          <<: *defaults_environment
      - run:
          name: Installing build dependencies
          command: |
            echo 'Installing build dependencies via APK'
            apk add --no-cache -t openjdk8-jre graphviz ttf-droid ttf-droid-nonlatin

            echo 'Setting env vars'
            echo 'export PLANTUML_VERSION=$PLANTUML_VERSION' >> $BASH_ENV
            echo 'export LANG=$PLANTUML_LANG' >> $BASH_ENV

            echo 'Downloading plantuml jar'
            curl -L https://sourceforge.net/projects/plantuml/files/plantuml.${PLANTUML_VERSION}.jar/download -o plantuml.jar
      - restore_cache:
          keys:
          - dependency-cache-{{ checksum "package.json" }}
      - run:
          name: Build Gitbooks
          command: |
            npm run gitbook:build
      - save_cache:
          key: build-cache-{{ checksum "package.json" }}
          paths:
            - _book

  deploy:
    <<: *defaults_working_directory
    <<: *defaults_docker_node
    steps:
      - run:
          <<: *defaults_Dependencies
      - run:
          <<: *defaults_environment
      - restore_cache:
          keys:
          - build-cache-{{ checksum "package.json" }}
      - run:
          name: setup environment vars for SNAPSHOT release
          command: |
            echo 'export GITBOOK_TARGET_BRANCH=$GITBOOK_TARGET_BRANCH' >> $BASH_ENV
            echo 'export GITHUB_TOKEN=$GITHUB_TOKEN' >> $BASH_ENV
            echo 'export GITHUB_PROJECT_USERNAME=$CIRCLE_PROJECT_USERNAME' >> $BASH_ENV
            echo 'export GITHUB_PROJECT_REPONAME=$CIRCLE_PROJECT_REPONAME' >> $BASH_ENV
            echo 'export GITHUB_TAG=$CIRCLE_TAG' >> $BASH_ENV
      - run:
          <<: *defaults_publish_to_gh_pages

workflows:
  version: 2
  build_and_test:
    jobs:
      - setup:
          context: org-global
          filters:
            tags:
              only: /.*/
            branches:
              ignore:
                - /feature*/
                - /bugfix*/
      - build:
          context: org-global
          requires:
            - setup
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
            branches:
              ignore:
                - /.*/
      - deploy:
          context: org-global
          requires:
            - build
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
            branches:
              ignore:
                - /.*/
